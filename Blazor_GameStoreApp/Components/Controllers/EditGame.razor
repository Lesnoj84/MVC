@page "/editgame"
@page "/editgame/{id:int}"
@inject NavigationManager Navigate
@inject Game Game
@inject GameDb GameDb



<PageTitle>@title</PageTitle>
<h3 class="mt-2">@title</h3>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText class="form-control" id="name" @bind-Value="game.Name" />
                <ValidationMessage For="()=>game.Name" />
            </div>
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label>
                <InputSelect class="form-select" id="genre" @bind-Value="game.Genre">
                    <option>@genreSelection</option>
                    @if (GameDb.GameGenre != null)
                    {
                        @foreach (var item in Enum.GetValues(typeof(enumGameGenre)))
                        {
                            <option>@item</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="()=>game.Genre" />

            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber class="form-control" id="price" @bind-Value="game.Price" />
                <ValidationMessage For="()=>game.Price" />

            </div>
            <div class="mb-3">
                <label for="releaseDate" class="form-label">Release Date:</label>
                <InputDate class="form-control" id="releaseDate" @bind-Value="game.ReleasedDate" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
            <a class="btn btn-secondary" role="button" href="/">Cancel</a>
        </EditForm>
    </div>
</div>
@code {

    [Parameter]
    public int? id { get; set; }

    [SupplyParameterFromForm]
    public Game? game { get; set; } = new Game() { ReleasedDate = DateOnly.FromDateTime(DateTime.UtcNow) };

    string? title = string.Empty;
    enumGameGenre genreSelection;

    protected override void OnParametersSet()
    {
        if (game.Name != null)
        {
            return;
        }
        else if (id != null)
        {
            game = GameDb.gamesList.Find(x => x.Id == id);
            title = game.Name;
            genreSelection = game.Genre;
        }
        else
        {
            game = new() { ReleasedDate = DateOnly.FromDateTime(DateTime.UtcNow) };
            title = "New Game";
            genreSelection = enumGameGenre.SelectGenre;
        }
    }

    private void HandleSubmit()
    {

        if (id == null)
        {
            var newGame = new Game()
                {
                    Id = GameDb.gamesList.Count + 1,
                    Name = game.Name,
                    Genre = game.Genre,
                    Price = game.Price,
                    ReleasedDate = game.ReleasedDate
                };
            GameDb.AddGame(game);
            Navigate.NavigateTo("/");
        }
        else
        {
            ArgumentNullException.ThrowIfNull(game);
            game.Id = id.Value;
            UpdateSelectedGame(game.Id);
            Navigate.NavigateTo("/");
        }
    }

    private Game GetSelectedGame(int id)
    {
        var game = GameDb.gamesList.Find(x => x.Id == id);
        ArgumentNullException.ThrowIfNull(game);
        return new Game { Id = game.Id, Name = game.Name, Genre = game.Genre, Price = game.Price, ReleasedDate = game.ReleasedDate };
    }

    private void UpdateSelectedGame(int id)
    {
        var editedGame = GameDb.gamesList.Find(x => x.Id == id);
        ArgumentNullException.ThrowIfNull(editedGame);
        editedGame.Name = game.Name;
        editedGame.Genre = game.Genre;
        editedGame.Price = game.Price;
        editedGame.ReleasedDate = game.ReleasedDate;

    }
}
